编写递归代码时需要注意的几个地方：
1.递归问题必须有一个最简单的情况，即递归方法的第一条语句总是包含一个return语句的条件判断
2.递归问题总是在尝试解决一个更小规模的子问题，问题的内容总是原来的一致，但是问题的规模总是在逐渐缩小，只有这样问题才能收敛到最简单的情况，
3.递归调用的父问题和和尝试解决的子问题之间不应该存在交集

坚持这些原则能够写出清晰的、正确的递归代码，来看一个二分法的例子：

    public void rank(int key, int[] a) {
            Arrays.sort(a);
            rank(key, a, 0, a.length - 1);
        }

    private int rank(int key, int[] a, int start, int end) {
        /*
         * 这段代码保证了递归调用可以结束，当start大于end时，证明数组的所有元素都被检查过了，可以结束递归了
         */
        if (start > end) {
            return -1;
        }
        int middle = start + (end - start) / 2;
        // 将问题分解为更小的两个子问题，而且这两个子问题没有重叠的部分，
        if (a[middle] < key) {
            return rank(key, a, middle + 1, end);
        } else if (a[middle] > key) {
            return rank(key, a, start, middle - 1);
        } else {
            // 另一种递归的结束方式，
            return middle;
        }
    }

   以上的两个方法会检查，key是否存在于数组a中，若存在返回数组对应的下标，若不存在返回-1，
   我们使用了两个方法来简化方法外界对于这方法的调用，同时也保证了递归方法的参数会被正确的传递进来，
   我们在递归的过程中，不断的将问题分解为更小的问题，以便于我们来找到答案。同时最简单的情况保证了
   递归不会无限调用下去。这种递归代码的结构是很清楚的。